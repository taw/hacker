#!/usr/bin/env ruby

class HVMCodeGen
  attr_reader :code
  def initialize
    @code = ""
  end

  def push(c)
    @code << c
  end

  def dup
    push "0^"
  end

  def push_number(n)
    if n <= 9
      @code << n.to_s
    else
      d = n / 9
      r = n % 9
      if d == 1
        push "9"
      else
        push_number(d)
        push "9*"
      end
      if r != 0
        push "#{r}+"
      end
    end
  end

  def print_char(c)
    push_number c.ord
    push "P "
  end

  def print_str(s)
    s.split(//).each do |c|
      print_char(c)
    end
  end

  def load_mem(i)
    push_number(i)
    push "<"
  end

  def save_mem(i)
    push_number(i)
    push ">"
  end

  def king_rat_step(i)
    load_mem i
    push_number (i+1)

    load_mem i
    load_mem (i+1)
    push ":"
    push_number 1
    push ":"
    push "1+"
    push "1?"
    push ">"
  end

  def king_rat
    (0..18).each do |i|
      king_rat_step(i)
    end
    load_mem 19
    push "p"
  end

  def shift_right_one_bit(i)
    load_mem(i)   # a
    dup           # a a
    push "2/"     # a (a/2)
    dup           # a (a/2) (a/2)
    save_mem(i)   # a (a/2)
    push "2*"     # a (a/2*2)
    push "-"      # a[0]
  end

  def xor
    push "0"
    push "1"
    # 2:
    shift_right_one_bit(0)
    shift_right_one_bit(1)
    push "0"   # x y 0
    push "1^"  # x y 0 y
    push "3^"  # x y 0 y x
    push "2**" # x y 0 (y*x*2)
    push "-"   # x y (-2*y*x)
    push "++"  # (x+y-2*y*x)

    push "1^*"   # sum, pow2, part
    push "2v+"   # pow2, sum+part
    push "1v0^+" # sum+part, pow2*2
  end

  def find_dups(num=12)
    (0...num).each do |i|
      (i+1..num).each do |j|
        load_mem i
        dup
        load_mem j
        push "-"
        push "2?2g"
        push "p!"
      end
    end
  end

  def broken_key
    load_mem 0
    load_mem 1
    push "/"
    push "4?"
    push "0<p!"
    push "1<p"
  end

  def broken_keys
    # (1/((a+b)/b))*b + (1/((a+b-1)/a))*a
    push "1"
    load_mem 0
    load_mem 1
    push "+"      # 1, (a+b)
    load_mem 1
    push "/"      # 1, (a+b)/b
    push "/"      # (1/((a+b)/b))
    load_mem 1
    push "*"      # (1/((a+b)/b))*b

    push "1"
    load_mem 0
    load_mem 1
    push "+"
    push "1-"     # 1, (a+b-1)
    load_mem 0
    push "/"      # 1, (a+b-1)/b
    push "/"      # (1/((a+b-1)/a))
    load_mem 0
    push "*"      # (1/((a+b-1)/b))*a

    push "+p"
  end
end

codegen = HVMCodeGen.new
# codegen.print_str "Hello, World"
codegen.broken_keys
puts codegen.code
